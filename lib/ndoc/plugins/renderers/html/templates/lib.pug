mixin article(obj, parents)
  if typeof obj === 'string'
    obj = list[obj]

  - var title = obj.id + (obj.type ? ' (' + obj.type + ')' : '');
  - var collection;
  article.docblock(id=obj.path, data-title=title)

    include ./_doc_header.pug

    if obj.type === 'section' || obj.type === 'namespace' || obj.type === 'class' || obj.type === 'mixin'

      if obj.description
        .section.description
          h3 Description
          .content
            +markdown(obj.description)

      - collection = obj.children.filter(x => x.type === 'namespace');
      if collection.length
        .section.namespaces
          h3 Namespaces
          .content
            +short_description_list(collection)

      - collection = obj.children.filter(x => x.type === 'class');
      if collection.length
        .section.classes
          h3 Classes
          .content
            +short_description_list(collection)

      - collection = obj.children.filter(x => x.type === 'mixin');
      if collection.length
        .section.mixins
          h3 Mixins
          .content
            +short_description_list(collection)

      if obj.type === 'class'

        if obj.superclass
          .section.superclass
            h3 Superclass
            .content
              +link(obj.superclass)

        if obj.subclasses.length
          .section.subclasses
            h3 Subclasses
            .content
              +links(obj.subclasses)

      if obj.included_mixins
        .section.mixins
          h3 Includes
          .content
            +links(obj.included_mixins)

      - collection = obj.children.filter(x => x.type === 'utility')
      if collection.length
        .section.utilities
          h3 Utilities
          .content
            +links(collection)

      - collection = obj.children.filter(x => x.type === 'constructor')
      if collection.length
        .section.constructor
          h3 Constructor
          .content
          ul.method-list
            li
              +link(collection[0])

      //-console.log('HERE', obj.id, obj.children.length)
      for selector, title in {'Events': ['event', 'events'], 'Class methods': ['class method', 'class_methods'], 'Class properties': ['class property', 'class_properties'], 'Instance methods': ['instance method', 'instance_methods'], 'Instance properties': ['instance property', 'instance_properties'], 'Constants': ['constant', 'constants']}
        - var methods = obj.children.filter(x => x.type === selector[0])
        if methods.length
          .section(class='#{selector[1]}')
            h3 #{title}
            .content
              ul.method-list
                for x in methods
                  li
                    +link(x, true)

    else

      .section.method
        .content

          include ./_signatures.pug

          include ./_arguments.pug

          +markdown(obj.description)

          if obj.bound && ~obj.bound.indexOf('#')
            p.note.methodized
              | This method can be called <em>either</em> as an 
              != link(obj.bound, 'instance method', ['link-short'])
              |  <em>or</em> as a generic method. If calling as generic, pass the instance in as the first argument.
          else if obj.bound && !~obj.bound.indexOf('#')
            p.note.functionalized
              | This method can be called <em>either</em> as an instance method <em>or</em> as a 
              != link(obj.bound, 'generic method', ['link-short'])
              |. If calling as generic, pass the instance in as the first argument.

    if obj.aliases && obj.aliases.length
      .alias.aliases
        | Aliased as:
        ul
          for alias in obj.aliases
            li
              +link(alias)

    if obj.alias_of
      .alias.alias-of
        | Alias of:
        ul
          li
            +link(obj.alias_of)

    if obj.related_to
      .related-to
        | Related to:
        +link(obj.related_to)

  //- children
  for child in obj.children.filter(x => x.type === 'section')
    +article(child, parents.concat(obj))
  for child in obj.children.filter(x => x.typee === 'utility')
    +article(child, parents.concat(obj))
  for child in obj.children.filter(x => x.type === 'constructor')
    +article(child, parents.concat(obj))
  for child in obj.children.filter(x => (x.type === 'namespace' || x.type === 'class' || x.type === 'mixin'))
    +article(child, parents.concat(obj))
  for child in obj.children.filter(x => x.type === 'event')
    +article(child, parents.concat(obj))
  for child in obj.children.filter(x => x.type === 'class method')
    +article(child, parents.concat(obj))
  for child in obj.children.filter(x => x.type === 'class property')
    +article(child, parents.concat(obj))
  for child in obj.children.filter(x => x.type === 'instance method')
    +article(child, parents.concat(obj))
  for child in obj.children.filter(x => x.type === 'instance property')
    +article(child, parents.concat(obj))
  for child in obj.children.filter(x => x.type === 'constant')
    +article(child, parents.concat(obj))


mixin api()
  for obj in tree.children
    if (showInternals || !obj.internal)
      +article(obj, [])



mixin short_description_list(collection)
  ul.method-details-list
    for obj in collection
      if typeof obj === 'string'
        obj = list[obj]
      li.method-description
        h4
          +link(obj)
        if obj.short_description
          +markdown(obj.short_description, true)



mixin link(obj, short, classes)
  != link(obj, short, classes)



mixin markdown(text, no_highlight)
  != markdown(text, no_highlight)



mixin links(collection)
  ul.method-list
    for obj in collection
      li
        +link(obj)
